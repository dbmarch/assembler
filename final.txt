; 	Complete program
;   Read in 2 arrays of 16 elements  (array 1, array 2)
;   Add arrays  array 1=array 1+ array 2
;   transpose arrays   array 2 = transpose (array 1)
;   output array 2
;------------------------------------------------------------------------------
; ARRAY 1    0...15
; ARRAY 2    16..31
; Add the Arrays:    ARRAY1= ARRAY1+ARRAY2
; Transpose Array:   ARRAY2= Transpose(ARRAY1)
;------------------------------------------------------------------------------
;	Code segment:
;------------------------------------------------------------------------------
    .code;
; Load in the arrays 
    SUB R0, R0;                 R0 = 0   This will be index into array.
    SUB R6, R6;                 R6 = 0   This will track how many elements we read in.
    SUB R6, R6;                 R6 = 0   This will track how many elements we read in.
    ADDC R6, 0x20;              R6 = 32   This will load in 32 values  Array 1, Array 2.
; Load in the arrays 

    ; Wait for PB to be a 1
@LOOP1  IN R5;      READ in R5
    RRC R5, 0x01;
    JMP C0 @LOOP1

; PB is a 1
@LOOP2  IN R5;      READ in R5
    RRC R5, 0x01;
    JMP C1 @LOOP1

; PB is a 0  - Save the array
    ST  R5, M[R0, 0x0];
    
    ADDC R0, 0x1;                   R0++
    SUBC R6, 0x1;                   R6--
    JMP Z0, @LOOP1;                 Go back and read more switches.

;  ALL 16 elements are read in.


; Matrix 4x4 addition
        SUB		R0, R0;						Set R0=0    R0 is index into array
        ADDC	R0, 0x0F;					R0 = 15
@Loop1	LD		R1, M[R0, 0x0];				R1 = M[R0+0]
        LD		R2, M[R0, 0x10];			R2 = M[R0+16]
        ADDC	R1, R2;						R1 = R1+R2
        ST		R1, M[R0, 0x0];				M[R0+0] = R1
        SUBC	R0, 0x1;					R0-=1
        JMP		Z0, @Loop1;					Jump to Loop1 when Zero NOT set.

; Now do the transpose!
;From Memory:
;	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
;	R11	R12	R13	R14	R21	R22	R23	R24	R31	R32	R33	R34	R41	R42	R43	R44

;To Memory:
;	R11	R21	R31	R41	R12	R22	R32	R42	R13	R23	R33	R43	R14	R24	R34	R44
;	0	4	8	12	1	5	9	13	2	6	10	14	3	7	11	15
        
        ; Loop 4 times
        SUB R4, R4;                         R4=0
        SUB R3, R3;                         R3=0        R3 is the overall loop counter
        ADDC    R3, #4;                     R3=4        Loop 4 times
        ;R11=>R11
        SUB		R0, R0;						R0=0        R0 is index into array 1
        SUB     R1, R1;                     R1=0        R1 is index into array 2
@Loop2  LD		R2, M[R0, 0x0];				R2 = M[R0+0]
        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        ;R12=>R21
        ADDC    R0, 0x4;                    R0+=4
        ADDC    R1, 0x1;                    R1++
        LD		R2, M[R0, 0x0];				R2 = M[R0+0]
        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        ;R13=>R31
        ADDC    R0, 0x4;                    R0+=4
        ADDC    R1, 0x1;                    R1++
        LD		R2, M[R0, 0x0];				R2 = M[R0+0]
        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        ;R14=>R41
        ADDC    R0, 0x4;                    R0+=4
        ADDC    R1, 0x1;                    R1=12
        LD		R2, M[R0, 0x0];				R2 = M[R0+0]
        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        SUB     R0, R0;                     R0=0-
        ADDC    R4, 0x1;                    R4++ is the index we start next
        ADD     R0, R4;                     R0 = R4
        ADDC    R1, 0x1;                    R1++
        SUBC    R3, 0x1;                    R3--
        JMP		Z0, @Loop2;					Jump to Loop2 when Zero NOT set.

; Output ARRAY 2 to the LEDs
    SUB R6, R6;                     R6 = 0
    ADDC R6, 0x10;                  R6 = 16
    SUB R0, R0;                     R0 = 0
LOOP2 LD R5, M[R0, 0x10];            R5 = M[R0+0x10]
    OUT R5;                         OUT R5
    
    ;; SOME DELAY
    SUB R7, R7
    ADDC R7, 0x1F
@DELAY AND R7, R7;                  NOOP
    AND R7, R7;                     NOOP
    AND R7, R7;                     NOOP
    SUBC R7, 0x1;
    JMP Z0, @DELAY
    
    ADDC R0, 0x01;                  R0++
    SUBC R6, 0x01;                  R6--
    JMP Z0, @LOOP2

; ALL 16 output to LED
    .endcode;
