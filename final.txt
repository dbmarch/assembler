; 	Complete program
;   Read in 2 arrays of 16 elements  (array 1, array 2)
;   Add arrays  array 1=array 1+ array 2
;   transpose arrays   array 2 = transpose (array 1)
;   output array 2
;------------------------------------------------------------------------------
; ARRAY 1    0...15
; ARRAY 2    16..31
; Add the Arrays:    ARRAY1= ARRAY1+ARRAY2
; Transpose Array:   ARRAY2= Transpose(ARRAY1)
;------------------------------------------------------------------------------
;	Code segment:
;------------------------------------------------------------------------------
    .code;
; Load in the arrays
    SUB R1, R1;       R1 = 0   This will be index into array.
    SUB R8, R8;       R8 is the indicator light.
    SUB R7, R7;
    ADDC R7, 0x2;
@ARRAY  SUB R6, R6;   R6 = 0   This will track how many elements we read in.
    ADDC R6, 0x10;    R6 = 16   This will load in 16 values for each array

    ADDC R8, 0x10;    INDICATOR. SHOWS WHICH ARRAY WE ARE ON.

; Wait for PB to be a 1
@LOOP1  IN R5;                      READ in R5
    RRC R5, 0x01;
    JMP C0 @LOOP1

; PB is a 1.  Wait for it to be 0.
@LOOP2  IN R5;                      READ in R5
    RRC R5, 0x01;
    JMP C1 @LOOP2;

; PB is a 0  -                      Save the array
    ST R5, M[R1, 0x0];
    OR R5, R8;
    OUT R5;                         OUTPUT LEDS to show progress.

    ADDC R1, 0x1;                   R1++
    SUBC R6, 0x1;                   R6--   This is our 16 byte countdown
    JMP Z0, @LOOP1;                 Go back and read more switches.

    SUBC R7, 0x1;                   Now next array
    JMP Z0, @ARRAY;                 Go back and read more switches.

;  ALL 16 elements are read in.

; Matrix addition
        SUB R1, R1;         Set R1=0    R1 is index into array
        SUB R4, R4;
        ADDC R4, 0x10;      R4 = 16
@Loop3 LD R3, M[R1, 0x0];   R3 = M[R1+0]
        LD R2, M[R1, 0x10];  R2 = M[R1+4]
        ADD R3, R2;         R3 = R3+R2
        ST R3, M[R1, 0x0];  M[R1+0] = R3
        ADDC R1, 0x1;
        SUBC R4, 0x1;    R1-=1
        JMP Z0, @Loop3; Jump to Loop3 when Zero NOT set.

; Signal we are done inputting by outputting all LEDS
    SUB R5, R5;
    ADDC R5, 0x1F;
    OUT R5;

; Now do the transpose!
;From Memory:
;	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
;	R11	R12	R13	R14	R21	R22	R23	R24	R31	R32	R33	R34	R41	R42	R43	R44

;To Memory:
;	R11	R21	R31	R41	R12	R22	R32	R42	R13	R23	R33	R43	R14	R24	R34	R44
;	0	4	8	12	1	5	9	13	2	6	10	14	3	7	11	15
        
        ; Loop 4 times
;        SUB R4, R4;                         R4=0
;        SUB R5, R5;                         R5=0        R5 is the overall loop counter
;        ADDC    R5, #4;                     R5=4        Loop 4 times
;        ;R11=>R11
;        SUB		R3, R3;						R3=0        R3 is index into array 1
;        SUB     R1, R1;                     R1=0        R1 is index into array 2
;@Loop4  LD		R2, M[R3, 0x0];				R2 = M[R3+0]
;        ST		R2, M[R1, 0x10];			M[R1+16] = R2;\

        ;R12=>R21
;        ADDC    R3, 0x4;                    R0+=4
;        ADDC    R1, 0x1;                    R1++
;        LD		R2, M[R3, 0x0];				R2 = M[R3+0]
;        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        ;R13=>R31
;        ADDC    R3, 0x4;                    R3+=4
;        ADDC    R1, 0x1;                    R1++
;        LD		R2, M[R3, 0x0];				R2 = M[R3+0]
;        ST		R2, M[R1, 0x10];			M[R1+16] = R2

        ;R14=>R41
;        ADDC    R3, 0x4;                    R3+=4
;        ADDC    R1, 0x1;                    R1=12
;        LD		R2, M[R3, 0x0];				R2 = M[R3+0]
;        ST		R2, M[R1, 0x10];			M[R1+16] = R2

;        SUB     R3, R3;                     R3=0-
;        ADDC    R4, 0x1;                    R4++ is the index we start next
;        ADD     R3, R4;                     R3 = R4
;        ADDC    R1, 0x1;                    R1++
;        SUBC    R5, 0x1;                    R5--
;        JMP		Z0, @Loop4;					Jump to Loop2 when Zero NOT set.

; Output ARRAY 2 to the LEDs (Result of Transpose)
    ; Wait for PB to be a 1
@LOOP5  IN R5;      READ in R5
    RRC R5, 0x01;
    JMP C0 @LOOP5

; PB is a 1
@LOOP6  IN R5;      READ in R5
    RRC R5, 0x01;
    JMP C1 @LOOP6

    SUB R6, R6;                     R6 = 0
    ADDC R6, 0x10;                  R6 = 16
    SUB R1, R1;                     R1 = 0
@LOOP7 LD R5, M[R1, 0x0];          R5 = M[R1+0]
    OUT R5;                         OUT R5

    ; Wait for PB to be a 1
@LOOP8  IN R5;        READ in R5
    RRC R5, 0x01;
    JMP C0 @LOOP8

; PB is a 1
@LOOP9  IN R5;        READ in R5
    RRC R5, 0x01;
    JMP C1 @LOOP9

    ADDC R1, 0x01;    R1++
    SUBC R6, 0x01;    R6--
    JMP Z0, @LOOP7

; enable all leds
; unfortunately we cant load 0xff into a register
; and we do not have a shift left
; so we will do it this way
    SUBC R1, R1;
    SUBC R2, R2;
    ADDC R1, 0xF;
    OR R2, R1;
    SUBC R1, R1;    
    ADDC R1, 0x10;
    OR R2, R1;
    ADD R1, R1;    0x20
    OR R2, R1;
    ADD R1, R1;    0x40
    OR R2, R1;
    ADD R1, R1;    0x80
    OR R2, R1;
@FOREVER OUT R2;
    JMP U0 @FOREVER

; ALL 16 output to LED
    .endcode;
